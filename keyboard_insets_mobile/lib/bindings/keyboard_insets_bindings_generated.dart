// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/keyboard_insets.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class KeyboardInsetsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  KeyboardInsetsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  KeyboardInsetsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Get keyboard height in logical pixels.
  double get_keyboard_height() {
    return _get_keyboard_height();
  }

  late final _get_keyboard_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('get_keyboard_height');
  late final _get_keyboard_height =
      _get_keyboard_heightPtr.asFunction<double Function()>();

  /// Check if the keyboard is currently visible.
  bool is_keyboard_visible() {
    return _is_keyboard_visible();
  }

  late final _is_keyboard_visiblePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('is_keyboard_visible');
  late final _is_keyboard_visible =
      _is_keyboard_visiblePtr.asFunction<bool Function()>();

  /// Check if the keyboard is currently animating (showing or hiding).
  bool is_keyboard_animating() {
    return _is_keyboard_animating();
  }

  late final _is_keyboard_animatingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('is_keyboard_animating');
  late final _is_keyboard_animating =
      _is_keyboard_animatingPtr.asFunction<bool Function()>();

  /// Register callback for keyboard inset changes.
  void register_inset_callback(
    KeyboardInsetUpdateCallback callback,
  ) {
    return _register_inset_callback(
      callback,
    );
  }

  late final _register_inset_callbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(KeyboardInsetUpdateCallback)>>(
      'register_inset_callback');
  late final _register_inset_callback = _register_inset_callbackPtr
      .asFunction<void Function(KeyboardInsetUpdateCallback)>();

  /// Register callback for keyboard state changes.
  void register_state_callback(
    KeyboardStateUpdateCallback callback,
  ) {
    return _register_state_callback(
      callback,
    );
  }

  late final _register_state_callbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(KeyboardStateUpdateCallback)>>(
      'register_state_callback');
  late final _register_state_callback = _register_state_callbackPtr
      .asFunction<void Function(KeyboardStateUpdateCallback)>();

  /// Unregister callback for keyboard inset changes.
  void unregister_inset_callback() {
    return _unregister_inset_callback();
  }

  late final _unregister_inset_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'unregister_inset_callback');
  late final _unregister_inset_callback =
      _unregister_inset_callbackPtr.asFunction<void Function()>();

  /// Unregister callback for keyboard state changes.
  void unregister_state_callback() {
    return _unregister_state_callback();
  }

  late final _unregister_state_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'unregister_state_callback');
  late final _unregister_state_callback =
      _unregister_state_callbackPtr.asFunction<void Function()>();

  /// Register callback for safe area inset changes.
  void register_safe_area_inset_callback(
    SafeAreaInsetUpdateCallback callback,
  ) {
    return _register_safe_area_inset_callback(
      callback,
    );
  }

  late final _register_safe_area_inset_callbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(SafeAreaInsetUpdateCallback)>>(
      'register_safe_area_inset_callback');
  late final _register_safe_area_inset_callback =
      _register_safe_area_inset_callbackPtr
          .asFunction<void Function(SafeAreaInsetUpdateCallback)>();

  /// Unregister callback for safe area inset changes.
  void unregister_safe_area_inset_callback() {
    return _unregister_safe_area_inset_callback();
  }

  late final _unregister_safe_area_inset_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'unregister_safe_area_inset_callback');
  late final _unregister_safe_area_inset_callback =
      _unregister_safe_area_inset_callbackPtr.asFunction<void Function()>();

  /// Enable or disable keyboard animation handling.
  void set_keyboard_animation(
    bool isEnabled,
  ) {
    return _set_keyboard_animation(
      isEnabled,
    );
  }

  late final _set_keyboard_animationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'set_keyboard_animation');
  late final _set_keyboard_animation =
      _set_keyboard_animationPtr.asFunction<void Function(bool)>();

  /// Call this function to stop listening to keyboard events.
  void stop_listening_insets() {
    return _stop_listening_insets();
  }

  late final _stop_listening_insetsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stop_listening_insets');
  late final _stop_listening_insets =
      _stop_listening_insetsPtr.asFunction<void Function()>();

  /// Do not call this function directly, it is called by platform-specific code.
  void platform_set_keyboard_animation(
    bool isEnabled,
  ) {
    return _platform_set_keyboard_animation(
      isEnabled,
    );
  }

  late final _platform_set_keyboard_animationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'platform_set_keyboard_animation');
  late final _platform_set_keyboard_animation =
      _platform_set_keyboard_animationPtr.asFunction<void Function(bool)>();
}

/// A callback for keyboard inset changes.
typedef KeyboardInsetUpdateCallback
    = ffi.Pointer<ffi.NativeFunction<KeyboardInsetUpdateCallbackFunction>>;
typedef KeyboardInsetUpdateCallbackFunction = ffi.Void Function(
    ffi.Float inset);
typedef DartKeyboardInsetUpdateCallbackFunction = void Function(double inset);

/// A callback for keyboard visibility and animation state changes.
typedef KeyboardStateUpdateCallback
    = ffi.Pointer<ffi.NativeFunction<KeyboardStateUpdateCallbackFunction>>;
typedef KeyboardStateUpdateCallbackFunction = ffi.Void Function(
    ffi.Bool isVisible, ffi.Bool isAnimating);
typedef DartKeyboardStateUpdateCallbackFunction = void Function(
    bool isVisible, bool isAnimating);

/// A callback for safe area inset changes.
typedef SafeAreaInsetUpdateCallback
    = ffi.Pointer<ffi.NativeFunction<SafeAreaInsetUpdateCallbackFunction>>;
typedef SafeAreaInsetUpdateCallbackFunction = ffi.Void Function(
    ffi.Float inset);
typedef DartSafeAreaInsetUpdateCallbackFunction = void Function(double inset);
